#!/bin/sh

set -e

name=bulifs
work_dir=work
template_dir=/usr/share/${name}/template
cache_dir=cache
clear_cache=false
skip_restore_cache=false
interactive=false
only_build_iso=false
log=/dev/stdout
apt_options="-y --no-install-recommends -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\""
info_prefix="[${name}] INFO:"
error_prefix="[${name}] ERROR:"

usage()
{
	echo "Usage: ${name} build [-c|--clear-cache]"
	echo "                    [-s|--skip-restore-cache]"
	echo "                    [-i|--interactive]"
	echo "                    [-o|--only-build-iso]"
	echo "                    [-q|--quiet]"
	echo "                    [-h|--help]"
	echo "See \"man ${name} build\" for more information on how to configure and build the live system."
	exit ${1}
}

msg_error() {
	local _msg="${1}"
	local _error=${2}

	echo "${error_prefix} ${_msg}"
	[ ${_error} -gt 0 ] && exit ${_error} || :
}

clear_cache() {
	echo "${info_prefix} Clearing all cache files for a complete rebuild..."
	rm -rf ${cache_dir}
	clear_cache=false
}

check_valid_variable() {
	case "${1}" in
		(*[![:blank:]]*) return 0 ;;
		(*) return 1
	esac
}

check_variables() {
	# Live System
	check_valid_variable "${DISTRIBUTION_CODENAME}" || msg_error "DISTRIBUTION_CODENAME needs to be set." 1
	check_valid_variable "${HOST_NAME}" || msg_error "HOST_NAME needs to be set." 1
	check_valid_variable "${LINUX_KERNEL_PACKAGE}" || msg_error "LINUX_KERNEL_PACKAGE needs to be set." 1

	# APT
	check_valid_variable "${APT_MIRROR}" || msg_error "APT_MIRROR needs to be set." 1
	check_valid_variable "${APT_COMPONENTS}" || msg_error "APT_COMPONENTS needs to be set." 1
	check_valid_variable "${APT_SOURCE_PACKAGES}" || msg_error "APT_SOURCE_PACKAGES needs to be set." 1

	# ISO
	check_valid_variable "${ISO_LABEL}" || msg_error "ISO_LABEL needs to be set." 1
	check_valid_variable "${COMPRESSION}" || msg_error "COMPRESSION needs to be set." 1
}

restore_cache() {
	echo "${info_prefix} Restoring cache..."
	rsync -a --delete ${cache_dir}/chroot ${work_dir}
}

bootstrap_base_system() {
	echo "${info_prefix} Bootstrapping base system..."

	rm -rf ${work_dir}/chroot
	mkdir -p ${work_dir}/chroot
	trap umount_chroot EXIT HUP INT TERM
	debootstrap \
		--arch=amd64 \
		--variant=minbase \
		"${DISTRIBUTION_CODENAME}" \
		${work_dir}/chroot \
		"${APT_MIRROR}" > ${log} 2>&1
	trap - EXIT HUP INT TERM
}

mount_chroot() {
	trap umount_chroot EXIT HUP INT TERM
	mount -o bind /dev ${work_dir}/chroot/dev
	mount -o bind /dev/pts ${work_dir}/chroot/dev/pts
	mount -t sysfs /sys ${work_dir}/chroot/sys
	mount -t proc /proc ${work_dir}/chroot/proc
}

umount_chroot() {
	trap - EXIT HUP INT TERM
	umount ${work_dir}/chroot/proc > /dev/null 2>&1 || :
	umount ${work_dir}/chroot/sys > /dev/null 2>&1 || :
	umount ${work_dir}/chroot/dev/pts > /dev/null 2>&1 || :
	umount ${work_dir}/chroot/dev > /dev/null 2>&1 || :
}

set_up_base_system() {
	echo "${info_prefix} Setting up base system..."

	export LC_ALL=C
	export HOME=/root

	# Set host name
	echo "${HOST_NAME}" > ${work_dir}/chroot/etc/hostname

	echo "${info_prefix} Configuring APT..."

	# Set APT configuration and settings
	mkdir -p ${work_dir}/chroot/etc/apt/apt.conf.d
	cp -rf apt/apt.conf apt/apt.conf.d ${work_dir}/chroot/etc/apt > /dev/null 2>&1 || :
	mkdir -p ${work_dir}/chroot/etc/apt/preferences.d
	cp -rf apt/preferences apt/preferences.d ${work_dir}/chroot/etc/apt > /dev/null 2>&1 || :

	# Set APT sources
	echo "deb ${APT_MIRROR} ${DISTRIBUTION_CODENAME} ${APT_COMPONENTS}" > ${work_dir}/chroot/etc/apt/sources.list
	[ "${APT_SOURCE_PACKAGES}" = true ] && echo "deb-src ${APT_MIRROR} ${DISTRIBUTION_CODENAME} ${APT_COMPONENTS}" >> ${work_dir}/chroot/etc/apt/sources.list || :
	echo "${APT_REPOSITORIES}" | tr ' ' '\n' | while read repository; do
		if [ -n "${repository}" ]; then
			echo "deb ${APT_MIRROR} ${DISTRIBUTION_CODENAME}-${repository} ${APT_COMPONENTS}" >> ${work_dir}/chroot/etc/apt/sources.list
			[ "${APT_SOURCE_PACKAGES}" = true ] && echo "deb-src ${APT_MIRROR} ${DISTRIBUTION_CODENAME}-${repository} ${APT_COMPONENTS}" >> ${work_dir}/chroot/etc/apt/sources.list || :
		fi
	done
	mkdir -p ${work_dir}/chroot/etc/apt/sources.list.d
	cp -rf apt/sources.list.d /etc/apt > /dev/null 2>&1 || :
	sed -i "s/\${DISTRIBUTION_CODENAME}/${DISTRIBUTION_CODENAME}/g" ${work_dir}/chroot/etc/apt/sources.list.d/* > /dev/null 2>&1 || :
	[ -f apt/sources.list ] && echo "${info_prefix} Ignoring apt/sources.list, please use settings.conf file variables and apt/sources.list.d directory for sources."

	# Add APT keys
	mkdir -p ${work_dir}/chroot/etc/apt/trusted.gpg.d
	cp -rf apt/trusted.gpg.d ${work_dir}/chroot/etc/apt > /dev/null 2>&1 || :

	echo "${info_prefix} Updating and upgrading packages..."
	export DEBIAN_FRONTEND=noninteractive
	mount_chroot
	chroot ${work_dir}/chroot apt-get update > ${log} 2>&1
	eval chroot ${work_dir}/chroot apt-get full-upgrade ${apt_options} > ${log} 2>&1
	umount_chroot

	echo "${info_prefix} Installing and configuring needed packages..."
	mount_chroot
	[ -n "$(chroot ${work_dir}/chroot apt-cache search -n ^live-config$ | cut -d ' ' -f1)" ] && live_config=live-config || live_config=open-infrastructure-system-config
	eval chroot ${work_dir}/chroot apt-get install ${apt_options} \
		apt-utils \
		live-boot \
		${live_config} \
		locales \
		net-tools \
		network-manager \
		resolvconf \
		systemd-sysv \
		user-setup > ${log} 2>&1
	umount_chroot

	if [ ! -f ${cache_dir}/.saved ]; then
		echo "${info_prefix} Installing kernel..."
		mount_chroot
		eval chroot ${work_dir}/chroot apt-get install ${apt_options} ${LINUX_KERNEL_PACKAGE} > ${log} 2>&1
		umount_chroot
	fi

	# Create machine ID symlink
	[ -L ${work_dir}/chroot/var/lib/dbus/machine-id ] || ln -fs ${work_dir}/chroot/etc/machine-id ${work_dir}/chroot/var/lib/dbus/machine-id

	echo "${info_prefix} Configuring network..."
	cat > ${work_dir}/chroot/etc/NetworkManager/NetworkManager.conf <<- EOF
	[main]
	rc-manager=resolvconf
	plugins=ifupdown,keyfile
	dns=dhclient

	[ifupdown]
	managed=false
	EOF
	chroot ${work_dir}/chroot dpkg-reconfigure resolvconf > /dev/null 2>&1
	chroot ${work_dir}/chroot dpkg-reconfigure network-manager > /dev/null 2>&1

	if ! grep "en_US.UTF-8" ${work_dir}/chroot/etc/default/locale > /dev/null 2>&1; then
		echo "${info_prefix} Setting locale..."
		mount_chroot
		chroot ${work_dir}/chroot locale-gen en_US.UTF-8 > ${log} 2>&1
		chroot ${work_dir}/chroot update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
		umount_chroot
	fi
}

save_cache() {
	echo "${info_prefix} Saving cache..."
	mkdir -p ${cache_dir}
	rsync -a --delete ${work_dir}/chroot ${cache_dir}
	touch ${cache_dir}/.saved
}

customize_system() {
	echo "${info_prefix} Customizing system..."

	export LC_ALL=C

	if [ -f packages.list ]; then
		echo "${info_prefix} Installing packages from packages.list..."
		mount_chroot
		eval chroot ${work_dir}/chroot apt-get install ${apt_options} $(sed -e "s/[[:space:]]*#.*// ; /^[[:space:]]*$/d" packages.list | sort | uniq) > ${log} 2>&1
		umount_chroot
	fi

	echo "${info_prefix} Copying files from includes directory..."
	cp -rf includes/* ${work_dir}/chroot > /dev/null 2>&1 || :

	if [ -f customize_chroot.sh ]; then
		echo "${info_prefix} Running customize_chroot.sh script..."
		cp customize_chroot.sh ${work_dir}/chroot/tmp
		chmod +x ${work_dir}/chroot/tmp/customize_chroot.sh
		mount_chroot
		chroot ${work_dir}/chroot /tmp/customize_chroot.sh
		umount_chroot
	fi

	if [ ${interactive} = true ]; then
		echo "${info_prefix} Entering an interactive shell, so you can customize the live system by entering commands..."
		mount_chroot
		chroot ${work_dir}/chroot su - || :
		umount_chroot
	fi
}

copy_boot_files() {
	echo "${info_prefix} Copying boot files..."

	mkdir -p ${work_dir}/image/live

	cp ${work_dir}/chroot/boot/vmlinuz-* ${work_dir}/image/vmlinuz > /dev/null 2>&1 || :
	cp ${work_dir}/chroot/boot/initrd.img-* ${work_dir}/image/initrd > /dev/null 2>&1 || :
}

clean_up_system() {
	echo "${info_prefix} Cleaning up system..."

	# Only keep latest kernel
	local apt_conf_dir=${work_dir}/chroot/etc/apt/apt.conf.d
	mv ${apt_conf_dir}/01autoremove-kernels ${apt_conf_dir}/.01autoremove-kernels
	mount_chroot
	chroot ${work_dir}/chroot apt-get autoremove --purge -y > ${log} 2>&1
	umount_chroot
	mv ${apt_conf_dir}/.01autoremove-kernels ${apt_conf_dir}/01autoremove-kernels

	# Clean APT cache
	mount_chroot
	chroot ${work_dir}/chroot apt-get clean > ${log} 2>&1
	umount_chroot

	# Miscellaneous
	truncate -s 0 ${work_dir}/chroot/etc/machine-id
	rm -rf ${work_dir}/chroot/tmp/* ${work_dir}/chroot/var/tmp/* ${work_dir}/chroot/root/.*_history ${work_dir}/chroot/boot/vmlinuz-* ${work_dir}/chroot/boot/initrd.img-*
	find ${work_dir}/chroot/var/log -type f -exec rm {} \;
}

make_squashfs() {
	echo "${info_prefix} Making squashfs, this may take a while..."

	rm -rf ${work_dir}/image/live
	mkdir -p ${work_dir}/image/live
	mksquashfs ${work_dir}/chroot ${work_dir}/image/live/filesystem.squashfs -comp "${COMPRESSION}" > ${log} 2>&1

	echo "${info_prefix} Done building the live system."
}

prepare_iso() {
	echo "${info_prefix} Preparing ISO..."

	rm -rf ${work_dir}/image/grub
	mkdir -p ${work_dir}/image/grub
	touch ${work_dir}/image/ubuntu
	[ -f grub/grub.cfg ] || msg_error "The file grub/grub.cfg is missing." 1
	grub-mkstandalone \
		--format=x86_64-efi \
		--output=${work_dir}/image/grub/bootx64.efi \
		--locales="" \
		--fonts="" \
		"boot/grub/grub.cfg=grub/grub.cfg"
	cd ${work_dir}/image/grub
	dd if=/dev/zero of=efiboot.img bs=1M count=10 > ${log} 2>&1
	mkfs.vfat efiboot.img > ${log} 2>&1
	mmd -i efiboot.img efi efi/boot
	mcopy -i efiboot.img bootx64.efi ::efi/boot
	cd - > /dev/null 2>&1
	grub-mkstandalone \
		--format=i386-pc \
		--output=${work_dir}/image/grub/core.img \
		--install-modules="linux16 linux normal iso9660 biosdisk memdisk search tar ls" \
		--modules="linux16 linux normal iso9660 biosdisk search" \
		--locales="" \
		--fonts="" \
		"boot/grub/grub.cfg=grub/grub.cfg"
	cat /usr/lib/grub/i386-pc/cdboot.img ${work_dir}/image/grub/core.img > ${work_dir}/image/grub/bios.img
}

generate_iso() {
	echo "${info_prefix} Generating ISO image..."

	rm -rf "${ISO_LABEL}"
	xorriso \
		-as mkisofs \
		-iso-level 3 \
		-full-iso9660-filenames \
		-volid "${HOST_NAME}" \
		-eltorito-boot boot/grub/bios.img \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		--eltorito-catalog boot/grub/boot.cat \
		--grub2-boot-info \
		--grub2-mbr /usr/lib/grub/i386-pc/boot_hybrid.img \
		-eltorito-alt-boot \
		-e EFI/efiboot.img \
		-no-emul-boot \
		-append_partition 2 0xef ${work_dir}/image/grub/efiboot.img \
		-output "${ISO_LABEL}" \
		-graft-points \
		${work_dir}/image \
		/boot/grub/bios.img=${work_dir}/image/grub/bios.img \
		/EFI/efiboot.img=${work_dir}/image/grub/efiboot.img > ${log} 2>&1
	owner=$(stat -c %U .)
	group=$(stat -c %G .)
	chown -R ${owner}:${group} "${ISO_LABEL}"
	echo "${info_prefix} Done building ISO. File: \"${ISO_LABEL}\""
}

if pidof -x $(basename $0) -o %PPID > /dev/null 2>&1; then
	msg_error "The script is already running." 1
fi

if [ $(id -u) -ne 0 ]; then
	msg_error "This script must be run as root." 1
fi

for argument in "${@}"; do
	case ${argument} in
		-c|--clear-cache)
			clear_cache=true
			shift
			;;
		-s|--skip-restore-cache)
			skip_restore_cache=true
			shift
			;;
		-i|--interactive)
			interactive=true
			shift
			;;
		-o|--only-build-iso)
			only_build_iso=true
			shift
			;;
		-q|--quiet)
			log=/dev/null
			shift
			;;
		-h|--help)
			usage 0
			shift
			;;
		*)
			msg_error "Invalid option \"${1}\"" 0
			usage 1
			;;
	esac
done

[ -f settings.conf ] && . ./settings.conf || msg_error "No settings.conf file found in the current directory. You need to run \"${name} config\" first and then go to the directory where the settings.conf file is." 1
check_variables
[ ${clear_cache} = true ] && clear_cache

if [ ${only_build_iso} != true ]; then
	if [ -f ${cache_dir}/.saved ]; then
		[ ${skip_restore_cache} != true ] && restore_cache
	else
		bootstrap_base_system
	fi
	set_up_base_system
	if [ ${skip_restore_cache} != true ] || [ ! -f ${cache_dir}/.saved ]; then
		save_cache
	fi
	customize_system
	copy_boot_files
	clean_up_system
	make_squashfs
fi

if [ -f ${work_dir}/image/live/filesystem.squashfs ]; then
	prepare_iso
	generate_iso
else
	msg_error "No squashfs found. You must build the live system at least once before building only the ISO." 1
fi
